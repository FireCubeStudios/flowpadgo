{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg","../node_modules/jsdom/lib/jsdom sync","../node_modules/parse5/lib sync"],"names":["initializeIcons","white","getColorFromString","ColorPickerX","React","useState","color","setColor","showPreview","setShowPreview","updateColor","useConstCallback","ev","colorObj","onShowPreviewClick","checked","Stack","ColorPicker","onChange","styles","colorPickerStyles","strings","alphaAriaLabel","transparencyAriaLabel","hueAriaLabel","Toggle","label","ChoiceGroup","dropdownStyles","dropdown","width","marginTop","marginLeft","options","key","text","addInsertIcon","iconName","mergeStyleSets","wrapper","display","column2","panel","padding","root","maxWidth","minWidth","colorRectangle","height","_items","iconProps","onClick","console","log","App","isOpen","setIsOpen","openPanel","dismissPanel","isOpenX","setIsOpenX","openPanelX","dismissPanelX","isOpenXX","setIsOpenXX","openPanelXX","dismissPanelXX","_itemsX","className","filter","canvasFallback","html2canvasOpts","allowTaint","style","boxShadow","Depths","depth16","horizontal","background","Dropdown","ILabelStyles","placeholder","CommandBar","items","ariaLabel","farItems","Panel","isLightDismiss","isBlocking","onDismiss","closeButtonAriaLabel","headerText","type","Slider","min","max","defaultValue","showValue","snapToStep","TextField","margin","CommandBarButton","PrimaryButton","window","innerwidth","innerHeight","tool","Tools","Pencil","lineColor","lineWidth","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id"],"mappings":"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","file":"static/js/main.0457080d.chunk.js","sourcesContent":["import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { SketchField, Tools } from 'react-sketch';\r\nimport { DefaultButton, PrimaryButton, Stack, IStackTokens, iconProps } from 'office-ui-fabric-react';\r\nimport { Label, ILabelStyles } from 'office-ui-fabric-react/lib/Label';\r\nimport { Pivot, PivotItem } from 'office-ui-fabric-react/lib/Pivot';\r\nimport { IStyleSet } from 'office-ui-fabric-react/lib/Styling';\r\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel';\r\nimport { useConstCallback } from '@uifabric/react-hooks';\r\nimport { CommandBar, ICommandBarItemProps } from 'office-ui-fabric-react/lib/CommandBar';\r\nimport { IButtonProps } from 'office-ui-fabric-react/lib/Button';\r\nimport { CommandBarButton } from 'office-ui-fabric-react/lib/Button';\r\nimport { Depths } from '@uifabric/fluent-theme/lib/fluent/FluentDepths';\r\nimport BackdropFilter from \"react-backdrop-filter\";\r\nimport {\r\n    ColorPicker,\r\n    ChoiceGroup,\r\n    IChoiceGroupOption,\r\n    Toggle,\r\n    getColorFromString,\r\n    IColor,\r\n    IColorPickerStyles,\r\n    IColorPickerProps,\r\n    updateA,\r\n} from 'office-ui-fabric-react/lib/index';\r\nimport { mergeStyleSets } from 'office-ui-fabric-react/lib/Styling';\r\nimport { initializeIcons } from '@uifabric/icons';\r\nimport { Slider } from 'office-ui-fabric-react/lib/Slider';\r\nimport { memoizeFunction } from 'office-ui-fabric-react/lib/Utilities';\r\nimport { TextField, MaskedTextField } from 'office-ui-fabric-react/lib/TextField';\r\nimport { Dropdown, DropdownMenuItemType, IDropdownStyles, IDropdownOption } from 'office-ui-fabric-react/lib/Dropdown';\r\n\r\n\r\ninitializeIcons();\r\n\r\n\r\nconst white = getColorFromString('#ffffff');\r\n\r\nexport const ColorPickerX: React.FunctionComponent = () => {\r\n    const [color, setColor] = React.useState(white);\r\n    const [showPreview, setShowPreview] = React.useState(true);\r\n   // const [alphaType, setAlphaType] = React.useState<IColorPickerProps['alphaType']>('alpha');\r\n\r\n    const updateColor = useConstCallback((ev: any, colorObj: IColor) => setColor(colorObj));\r\n    const onShowPreviewClick = useConstCallback((ev: any, checked?: boolean) => setShowPreview(!!checked));\r\n  /*  const onAlphaTypeChange = React.useCallback(\r\n        (ev: any, option: IChoiceGroupOption = alphaOptions[0]) => {\r\n            if (option.key === 'none') {\r\n                // If hiding the alpha slider, remove transparency from the color\r\n                setColor(updateA(color, 100));\r\n            }\r\n            setAlphaType(option.key, as ,IColorPickerProps['alphaType']);\r\n        },\r\n        [color],\r\n    );*/\r\n\r\n    return (\r\n        <Stack>\r\n            <ColorPicker\r\n           \r\n                color={color}\r\n                onChange={updateColor}\r\n             //   alphaType={alphaType}\r\n                showPreview={showPreview}\r\n                styles={colorPickerStyles}\r\n                // The ColorPicker provides default English strings for visible text.\r\n                // If your app is localized, you MUST provide the `strings` prop with localized strings.\r\n                strings={{\r\n                    // By default, the sliders will use the text field labels as their aria labels.\r\n                    // If you'd like to provide more detailed instructions, you can use these props.\r\n                    alphaAriaLabel: 'Alpha slider: Use left and right arrow keys to change value, hold shift for a larger jump',\r\n                    transparencyAriaLabel:\r\n                        'Transparency slider: Use left and right arrow keys to change value, hold shift for a larger jump',\r\n                    hueAriaLabel: 'Hue slider: Use left and right arrow keys to change value, hold shift for a larger jump',\r\n                }}\r\n            />\r\n\r\n       \r\n                <Toggle label=\"Show preview box\" onChange={onShowPreviewClick} checked={showPreview} />\r\n                <ChoiceGroup\r\n                  //  label=\"Alpha slider type\"\r\n                   // options={alphaOptions}\r\n                   // defaultSelectedKey={alphaOptions[0].key}\r\n                   // onChange={onAlphaTypeChange}\r\n                />\r\n        </Stack>\r\n    );\r\n};\r\nconst dropdownStyles: Partial<IDropdownStyles> = {\r\n    dropdown: { width: 150, marginTop: 5, marginLeft: 5 }\r\n};\r\nconst options: IDropdownOption[] = [\r\n    { key: 'select', text: 'Selection tool' },\r\n    { key: 'pencil', text: 'Pencil tool' },\r\n    { key: 'line', text: 'Line tool'},\r\n    { key: 'rectangle', text: 'Rectangle shape tool' },\r\n    { key: 'circle', text: 'Circle shape tool' },\r\n    { key: 'pan', text: 'Panning tool' }\r\n];\r\n\r\nconst stackTokens: IStackTokens = { childrenGap: 20 };\r\nconst addIcon: IIconProps = { iconName: 'Color' };\r\nconst addInsertIcon: IIconProps = { iconName: 'Add' };\r\nconst addbackgroundIcon: IIconProps = { iconName: 'Picture' };\r\nfunction App() {\r\n    const [isOpen, setIsOpen] = React.useState(false);\r\n    const openPanel = useConstCallback(() => setIsOpen(true));\r\n    const dismissPanel = useConstCallback(() => setIsOpen(false));\r\n    const [isOpenX, setIsOpenX] = React.useState(false);\r\n    const openPanelX = useConstCallback(() => setIsOpenX(true));\r\n    const dismissPanelX = useConstCallback(() => setIsOpenX(false));\r\n    const [isOpenXX, setIsOpenXX] = React.useState(false);\r\n    const openPanelXX = useConstCallback(() => setIsOpenXX(true));\r\n    const dismissPanelXX = useConstCallback(() => setIsOpenXX(false));\r\n    const _itemsX: ICommandBarItemProps[] = [\r\n        {\r\n            key: 'insert',\r\n            text: 'Insert',\r\n            iconProps: { iconName: 'Add' },\r\n            onClick: () => { openPanelXX() }\r\n        },\r\n        {\r\n            key: 'color',\r\n            text: 'Tool options',\r\n            iconProps: { iconName: 'Edit' },\r\n            onClick: () => { openPanel() }\r\n        },\r\n        {\r\n            key: 'canvas',\r\n            text: 'Canvas',\r\n            iconProps: { iconName: 'Picture' },\r\n            onClick: () => { openPanelX() }\r\n        },\r\n    ];\r\n        return (\r\n            <div className=\"App\">\r\n                <BackdropFilter\r\n                    className=\"bluredForm\"\r\n                    filter={\"blur(10px) sepia(50%)\"}\r\n                    canvasFallback={true}\r\n              \r\n                    html2canvasOpts={{\r\n                        allowTaint: true\r\n                    }}\r\n                >\r\n                    <Stack style={{ boxShadow: Depths.depth16 }}>\r\n                        <Stack horizontal style={{ background: \"#ffffff\" }}>\r\n                            <text style={{ marginTop: 7, marginLeft: 5, background: \"#ffffff\" }}>Tool:</text>\r\n                            <Dropdown\r\n                                ILabelStyles\r\n                                placeholder=\"Pencil tool\"\r\n                                options={options}\r\n                                styles={dropdownStyles}\r\n                                style={{ background: \"#ffffff\"}}\r\n\r\n                            />       \r\n                            <CommandBar\r\n\r\n                                items={_itemsX} ariaLabel=\"Use left and right arrow keys to navigate between commands\"\r\n                                farItems={_items} />\r\n\r\n                            <Panel\r\n                                isLightDismiss\r\n                                isOpen={isOpen}\r\n                                isBlocking={false}\r\n                               onDismiss={dismissPanel}\r\n                                closeButtonAriaLabel=\"Close\"\r\n                                headerText=\"Tool options: \"\r\n                                type={3}\r\n                            >\r\n                                <stack>\r\n                                    <h1>Tool size:</h1>\r\n                                    <Slider min={50} max={500} defaultValue={300} style={{ background: \"#ffffff\" }} showValue snapToStep />\r\n                                    <h1>Tool color picker:</h1>\r\n                                    <ColorPickerX />\r\n                                </stack>\r\n                            </Panel>\r\n                            <Panel\r\n                                isLightDismiss\r\n                                isOpen={isOpenX}\r\n                                isBlocking={false}\r\n                                onDismiss={dismissPanelX}\r\n                                closeButtonAriaLabel=\"Close\"\r\n                                headerText=\"Canvas options\"\r\n                                type={3}\r\n                            >\r\n                                <stack>\r\n                                    <h1>Canvas size:</h1>\r\n                                    <Toggle label=\"Custom size:\" />\r\n                                    <Slider label=\"Canvas width:\" min={0} max={500}  defaultValue={200} showValue  />\r\n                                    <Slider label=\"Canvas height:\" min={50} max={500}  defaultValue={300} showValue />\r\n                                    <h1>Canvas background color:</h1>\r\n                                    <Toggle label=\"Fill:\" />\r\n                                    <ColorPickerX />\r\n                                    </stack>\r\n                            </Panel>\r\n                            <Panel\r\n                                isLightDismiss\r\n                                isOpen={isOpenXX}\r\n                                isBlocking={false}\r\n                                onDismiss={dismissPanelXX}\r\n                                closeButtonAriaLabel=\"Close\"\r\n                                headerText=\"Insert\"\r\n                                type={3}\r\n                            >\r\n                                <stack>\r\n                                    <h1>Insert Text:</h1>\r\n                                    <Stack horizontal>   <TextField placeholder=\"Enter text...\" style={{ margin: 5 }}/><CommandBarButton iconProps={addInsertIcon} style={{ marginLeft: 5 }} text=\"Insert text\"/></Stack>\r\n                                    <h1>Insert image:</h1>\r\n                                    <stack>\r\n                                        <Stack horizontal>   <TextField placeholder=\"Inser image url...\" style={{ margin: 5 }} /><CommandBarButton style={{ marginLeft: 5 }} iconProps={addInsertIcon} text=\"Insert image\" /></Stack>\r\n                                        <PrimaryButton text=\"Select image\" style={{ marginTop: 15 }} label=\"Select local image:\" />\r\n                                    </stack>\r\n                                    <h1>Insert canvas background image:</h1>\r\n                                    <PrimaryButton text=\"Select image\" style={{}} />\r\n                                    <Toggle label=\"Fit canvas (X,Y):\" />\r\n                                    <Toggle label=\"Fit canvas (Y):\" />\r\n                                    <Toggle label=\"Fit canvas (X):\" />\r\n                                </stack>\r\n                            </Panel>\r\n                    </Stack>\r\n                    <SketchField width={window.innerwidth}\r\n                        height={window.innerHeight - 50}\r\n                        tool={Tools.Pencil}\r\n                        lineColor='black'\r\n          \r\n                        lineWidth={3} />\r\n\r\n                    </Stack>\r\n                </BackdropFilter>\r\n            </div>\r\n        );\r\n}\r\nconst alphaOptions: IChoiceGroupOption[] = [\r\n    { key: 'alpha', text: 'Alpha' },\r\n    { key: 'transparency', text: 'Transparency' },\r\n    { key: 'none', text: 'None' },\r\n];\r\n\r\n\r\nconst classNames = mergeStyleSets({\r\n    wrapper: { display: 'flex' },\r\n    column2: { marginLeft: 10 },\r\n});\r\n\r\nconst colorPickerStyles: Partial<IColorPickerStyles> = {\r\n    panel: { padding: 12 },\r\n    root: {\r\n        maxWidth: 352,\r\n        minWidth: 352,\r\n    },\r\n    colorRectangle: { height: 268 },\r\n};\r\nconst _items: ICommandBarItemProps[] = [\r\n    {\r\n        key: 'zoom',\r\n        text: 'Zoom in',\r\n        iconProps: { iconName: 'Zoomin' }\r\n    },\r\n    {\r\n        key: 'unzoom',\r\n        text: 'Zoom out',\r\n        iconProps: { iconName: 'Zoomout' }\r\n \r\n    },\r\n        {\r\n            key: 'undo',\r\n            text: 'Undo',\r\n            iconProps: { iconName: 'Undo' }\r\n        },\r\n        {\r\n            key: 'redo',\r\n            text: 'Redo',\r\n            iconProps: { iconName: 'Redo' },\r\n            onClick: () => console.log('Share'),\r\n    },\r\n    {\r\n        key: 'cut',\r\n        text: 'Cut selection',\r\n        iconProps: { iconName: 'cut' }\r\n    },\r\n    {\r\n        key: 'copy',\r\n        text: 'Copy selection',\r\n        iconProps: { iconName: 'copy' }\r\n    },\r\n   \r\n        {\r\n            key: 'download',\r\n            text: 'Download',\r\n            iconProps: { iconName: 'Download' },\r\n            onClick: () => console.log('Download'),\r\n        },\r\n        {\r\n            key: 'delete',\r\n            text: 'Delete',\r\n            iconProps: { iconName: 'Delete' }\r\n        },\r\n    ];\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 832;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 864;"],"sourceRoot":""}